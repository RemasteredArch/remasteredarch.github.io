---
import Page from "../../layouts/Page.astro";
import NavHeader from "../../components/NavHeader.astro";
import IconListItem from "../../components/IconListItem.astro";
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import { authorListAsArray, resolveAuthors } from "../../components/ResolveAuthors.astro";
import AuthorList from "../../components/AuthorList.astro";
import LegalItem from "../../components/LegalItem.astro";
import Footer from "../../components/Footer.astro";
import { IsoDateTime } from "../../components/Time.astro";

/// Format published date, and, if it exists, the last updated date as strings.
///
/// If the two dates are one the same day, the last updated date is only a time.
function formatDates(
    published: IsoDateTime,
    last_updated?: IsoDateTime,
): { published: string; last_updated?: string } {
    let strings: { published: string; last_updated?: string } = {
        published: published.format("dateTime"),
    };

    if (!last_updated) {
        return strings;
    }

    strings.last_updated = last_updated.format(
        last_updated.sameDay(published) ? "hour" : "dateTime",
    );

    return strings;
}

export const getStaticPaths = (async () => {
    const blog = await getCollection("blog");

    return blog.map((post) => ({
        params: { slug: post.slug },
        props: { post },
    }));
}) satisfies GetStaticPaths;

const { post } = Astro.props;
const { Content } = await post.render();
const {
    title,
    authors: author_references,
    description,
    published,
    last_updated,
    extra_legal_disclaimers,
} = post.data;

const { published: published_str, last_updated: last_updated_str } = formatDates(
    new IsoDateTime(published.iso, published.timeZone),
    last_updated ? new IsoDateTime(last_updated.iso, last_updated.timeZone) : undefined,
);

const authors = await resolveAuthors(author_references);
---

<Page
    title={title}
    author={authorListAsArray(authors).map((author) => author.name)}
    description={description}>
    <NavHeader title={title}>
        <IconListItem>
            <span slot="icon">&lt;-</span>
            <a slot="text" href="/blog/">Blog</a>
        </IconListItem>
    </NavHeader>
    <div class="metadata">
        <div class="description"><i>{description}</i></div>
        <div class="author">Written by <AuthorList authors={authors} /></div>
        <div class="published">
            Published
            {
                // Is this in the time zone of the dev or what's embedded into the date?
                published_str
            }{last_updated && <span>, last updated {last_updated_str}</span>}
        </div>
        <!--<div class="tags">{tags}</div>-->
    </div>
    <hr />
    <main>
        <Content />
    </main>
    {
        extra_legal_disclaimers && (
            <Footer slot="footer">
                {extra_legal_disclaimers.map((disclaimer) => {
                    if (typeof disclaimer === "string") {
                        return <p>{disclaimer}</p>;
                    }

                    return (
                        <LegalItem
                            project_name={disclaimer.project_name}
                            project_link={disclaimer.project_link}
                            license_name={disclaimer.license_name}
                            license_link={disclaimer.license_link}
                            copyright_holder={disclaimer.copyright_holder}
                            copyright_year={disclaimer.copyright_year}
                        />
                    );
                })}
            </Footer>
        )
    }
</Page>
